// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Not(in=instruction[15],out=notcomp); 									// if 15th bit is a 0 then true and is an @instruction
	Mux16(a=outALU,b=instruction,sel=notcomp,out=muxA);						// first mux into aregister 

	Or(a=notcomp,b=instruction[5],out=loadA);								// if not instruction 15 or instruction 5 then need to load A 
	ARegister(in=muxA,load=loadA,out=outA,out[0..14]=addressM);				// pass to addressM
 
	And(a=instruction[15],b=instruction[12],out=A-M);						// check instruction 12 and 15 to see if its A or M
	Mux16(a=outA,b=inM,sel=A-M,out=muxAM);
	
	And(a=instruction[15],b=instruction[4],out=loadD);						// if instruction 15 and instruction 4 then need to load D 
	DRegister(in=outALU,load=loadD,out=outD);		

	And(a=instruction[15],b=instruction[3],out=writeM);             		// if instruction 15 and instruction 3 then need to write to M 

	ALU(x=outD,y=muxAM,
		zx=instruction[11],
		nx=instruction[10],
		zy=instruction[9],
		ny=instruction[8],
		f=instruction[7],
		no=instruction[6],
		out=outALU,
		out=outM,
		zr=zr,
		ng=ng);												// match pattern


	Not(in=zr,out=notzr);									// not zero
	Not(in=ng,out=notng);									// not negative
	And(a=notng,b=notzr,out=pos);							// not negative and not zero means positive
	
	And(a=instruction[15],b=instruction[0],out=jgt);		// comp and jmp greater than 0 
	And(a=instruction[15],b=instruction[1],out=jeq);		// comp and jmp equal to 0
	And(a=instruction[15],b=instruction[2],out=jlt);		// comp and jmp less than 0
	
	And(a=jgt,b=pos,out=jmp1);								// if jgt instruction and postive then jmp 
	And(a=jeq,b=zr,out=jmp2);								// if jeq instruction and zr then jmp 
	And(a=jlt,b=ng,out=jmp3);								// if jlt instruction and ng then jmp 

	Or(a=jmp1,b=jmp2,out=jmp4);								// check if jmp 1 or jmp 2 true
	Or(a=jmp3,b=jmp4,out=jmp);								// check if jmp 1 or jmp 2 or jmp 3 is true

	PC(in=outA,load=jmp,inc=true,reset=reset,out[0..14]=pc);	// load bit if a jmp increment always true and reset=reset

}   