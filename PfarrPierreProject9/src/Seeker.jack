class Seeker {
    field int x;
    field int y;

    /* Construct Bludger */
    
    constructor Seeker new(int Ax, int Ay) {
        let x = Ax;
        let y = Ay;
        do draw();
        return this;
    }

    method int get_x_loc() {
        return x;
    }

    method int get_y_loc() {
        return y;
    }

    method void draw() {
        // draw the current seeker
        do draw_top();
        do draw_bottom();
        do draw_stick();
        return;
    }

    method void erase() {
        // erase the current seeker
        do Screen.setColor(false);
        do Screen.drawRectangle(x,y,x+40,y+15);
        do Screen.setColor(true);
        return;     
    }

    method void draw_stick() {
        var int i;
        let i=6;
        while(i<9){
            do Screen.drawLine(x+5,y+i,x+40,y+i);
            let i = i+1;
        }
        return;
    }

    method void draw_top() {
        var int i;
        let i=3;
        while(i<6){
            do Screen.drawLine(x,y+i,x+10,y+i);
            let i = i+1;
        }
        return;
    }

    method void draw_bottom() {
        var int i;
        let i=9;
        while(i<12){
            do Screen.drawLine(x,y+i,x+10,y+i);
            let i = i+1;
        }
        return;
    }
    

    method boolean check_collision(Bludger bludger){
        // This method checks for a collision between
        // The seeker and given Bludger

        var int x_loc; // x value of center Bludger
        var int y_loc; // y value of center Bludger
        var int r; // radius+1 for hit box
        var boolean intersect_x; // Seeker and Bludger area overlap x value
        var boolean intersect_y; // Seeker and Bludger area overlap y value
    
        let x_loc = bludger.get_x_loc();
        let y_loc = bludger.get_y_loc();
        let r = 10;
        let intersect_x = false;
        let intersect_y = false;

        if ((((x_loc-r)>x)|((x_loc-r)=x)) & (((x_loc-r)<(x+40))|((x_loc-r)=(x+40)))){
            let intersect_x = true;
        }

        if ((((x_loc+r)>x)|((x_loc+r)=x)) & (((x_loc+r)<(x+40))|((x_loc+r)=(x+40)))){
            let intersect_x = true;
        }

        if ((((y_loc-r)>y)|((y_loc-r)=y)) & (((y_loc-r)<(y+15))|((y_loc-r)=(y+15)))){
            let intersect_y = true;
        }

        if ((((y_loc+r)>y)|((y_loc+r)=y)) & (((y_loc+r)<(y+15))|((y_loc+r)=(y+15)))){
            let intersect_y = true;
        }

        if((intersect_x)&(intersect_y)){
            return true;
        }
        else{
            return false;
        }
    }

    method boolean check_catch(Snitch snitch){
        // This method checks for a catch between
        // The seeker and the snitch

        var int x_loc; // x value of center Bludger
        var int y_loc; // y value of center Bludger
        var int r; // radius+1 for hit box
        var boolean intersect_x; // Seeker and Bludger area overlap x value
        var boolean intersect_y; // Seeker and Bludger area overlap y value
    
        let x_loc = snitch.get_x_loc();
        let y_loc = snitch.get_y_loc();
        let r = 4;
        let intersect_x = false;
        let intersect_y = false;

        if ((((x_loc-9)>x)|((x_loc-9)=x)) & (((x_loc-9)<(x+40))|((x_loc-9)=(x+40)))){
            let intersect_x = true;
        }

        if ((((x_loc+9)>x)|((x_loc+9)=x)) & (((x_loc+9)<(x+40))|((x_loc+9)=(x+40)))){
            let intersect_x = true;
        }

        if ((((y_loc-r)>y)|((y_loc-r)=y)) & (((y_loc-r)<(y+15))|((y_loc-r)=(y+15)))){
            let intersect_y = true;
        }

        if ((((y_loc+r)>y)|((y_loc+r)=y)) & (((y_loc+r)<(y+15))|((y_loc+r)=(y+15)))){
            let intersect_y = true;
        }

        if((intersect_x)&(intersect_y)){
            return true;
        }
        else{
            return false;
        }
    }

    method void moveUp() {
        if (y > 25) {
            do erase();
            let y = y - 5;
            do draw();
        }
        return;
    }

    method void moveDown() {
        if ((y + 15) < 230) {
            do erase();
            let y = y + 5;
            do draw();
        }
        return;
    }

    method void moveLeft() {
        if (x > 20) {
            do erase();
            let x = x - 5;
            do draw();
        }
        return;
    }

    method void moveRight() {
        if ((x+40) < 490) {
            do erase();
            let x = x + 5;
            do draw();
        }
        return;
    }

    


}